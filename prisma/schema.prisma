// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  password   String
  email      String    @unique
  bio        String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Tweets     Tweet[]
  Likes      Like[]
  Comments   Comment[]
}

model Tweet {
  id         Int       @id @default(autoincrement())
  tweet      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  Likes      Like[]
  Comments   Comment[]

  @@index([userId]) // 사용자가 작성한 Tweet 리스트 전체 검색을 위한 인덱스
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId    Int

  @@unique([userId, tweetId]) // 한 사용자가 동일한 Tweet에 중복으로 좋아요를 누르는 것을 방지하기 위한 유니크 제약; 즉 Like 테이블에서 두 조합이 유일해야 함
  @@index([userId]) // 사용자가 좋아요한 Tweet 리스트 전체 검색을 위한 인덱스
  @@index([tweetId]) // 특정 Tweet에 좋아요를 누른 사용자 리스트 전체 검색을 위한 인덱스
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  tweet      Tweet    @relation(fields: [tweetId], references: [id])
  tweetId    Int
}
